..\src\bytebuf.h:48:5: warning: Member variable 'ByteBuffer::ReadOnly' is not initialized in the constructor. [uninitMemberVar]
    ByteBuffer()    { Init(); }
    ^
..\src\misc.h:397:13: error: Uninitialized variable: result [uninitvar]
    return (result == EOF ? ERROR_FileWrite : OK);
            ^
..\src\win_mmap.h:86:5: warning: Class 'WinMMap' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    m_address = MapViewOfFile(m_mapping, FILE_MAP_READ, 0, 0, 0);
    ^
..\src\win_mmap.h:86:5: warning: Class 'WinMMap' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    m_address = MapViewOfFile(m_mapping, FILE_MAP_READ, 0, 0, 0);
    ^
..\src\dstring.h:42:5: style: Class 'DString' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    DString (uint size) { Init (size); }
    ^
..\src\win_mmap.h:32:5: style: Class 'WinMMap' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    WinMMap(char const* filename);
    ^
..\src\filter.h:46:5: warning: Member variable 'Filter::oldDataTreePly' is not initialized in the constructor. [uninitMemberVar]
    Filter ()           { Init (0); }
    ^
..\src\filter.h:47:5: warning: Member variable 'Filter::oldDataTreePly' is not initialized in the constructor. [uninitMemberVar]
    Filter (uint size)  { Init (size); }
    ^
..\src\filter.h:47:5: style: Class 'Filter' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Filter (uint size)  { Init (size); }
    ^
..\src\filter.cpp:358:13: style: Unsigned expression 'CODE_RunLength' can't be negative so it is unnecessary to test it. [unsignedPositive]
            ENCODE_CONTROL_BITS (CODE_RunLength);
            ^
..\src\filter.cpp:378:13: style: Unsigned expression 'CODE_PrevLiteral' can't be negative so it is unnecessary to test it. [unsignedPositive]
            ENCODE_CONTROL_BITS (CODE_PrevLiteral);
            ^
..\src\filter.cpp:382:13: style: Unsigned expression 'CODE_NewLiteral' can't be negative so it is unnecessary to test it. [unsignedPositive]
            ENCODE_CONTROL_BITS (CODE_NewLiteral);
            ^
..\src\stralloc.h:73:5: warning: Member variable 'StrAllocator::LastAllocSize' is not initialized in the constructor. [uninitMemberVar]
    StrAllocator () {
    ^
..\src\stralloc.h:80:5: warning: Member variable 'StrAllocator::LastAllocSize' is not initialized in the constructor. [uninitMemberVar]
    StrAllocator (uint bucketSize) {
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::Offset' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::WhiteID_Low' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::BlackID_Low' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::EventID_Low' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::SiteID_Low' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::RoundID_Low' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::WhiteBlack_High' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::EventSiteRnd_High' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::EcoCode' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::Dates' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::WhiteElo' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::BlackElo' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::FinalMatSig' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::Flags' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::VarCounts' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::NumHalfMoves' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::HomePawnData' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::Length_Low' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\index.h:252:5: warning: Member variable 'IndexEntry::Length_High' is not initialized in the constructor. [uninitMemberVar]
    IndexEntry() {}
    ^
..\src\movelist.h:60:1: style: The class 'MoveList' does not have a constructor although it has private member variables. [noConstructor]
class MoveList
^
..\src\sqlist.h:30:5: warning: Member variable 'SquareList::Squares' is not initialized in the constructor. [uninitMemberVar]
    SquareList() { ListSize = 0; }
    ^
..\src\game.h:305:5: warning: Member variable 'Game::FenString' is not initialized in the constructor. [uninitMemberVar]
    Game() { Init(); }
    ^
..\src\game.h:305:5: warning: Member variable 'Game::TagList' is not initialized in the constructor. [uninitMemberVar]
    Game() { Init(); }
    ^
..\src\game.h:305:5: warning: Member variable 'Game::NumMovesPrinted' is not initialized in the constructor. [uninitMemberVar]
    Game() { Init(); }
    ^
..\src\game.h:305:5: warning: Member variable 'Game::StopLocation' is not initialized in the constructor. [uninitMemberVar]
    Game() { Init(); }
    ^
..\src\stralloc.h:80:5: style: Class 'StrAllocator' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    StrAllocator (uint bucketSize) {
    ^
..\src\sqset.h:28:5: style: Class 'SquareSet' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    SquareSet(squareT *squares)
    ^
..\src\pgnparse.h:89:5: style: Class 'PgnParser' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    PgnParser (MFile * infile) { Init (infile); }
    ^
..\src\pgnparse.h:90:5: style: Class 'PgnParser' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    PgnParser (const char * inbuffer) { Init (inbuffer); }
    ^
..\src\stored.h:32:2: style: Class 'StoredLine' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StoredLine(Position* pos);
 ^
..\src\game.cpp:3017:25: style: Condition '!endedColumn' is always true [knownConditionTrueFalse]
                    if (!endedColumn)
                        ^
..\src\game.cpp:2963:28: note: Assignment 'endedColumn=false', assigned value is 0
        bool endedColumn = false;
                           ^
..\src\game.cpp:3017:25: note: Condition '!endedColumn' is always true
                    if (!endedColumn)
                        ^
..\src\game.cpp:3893:13: style: Condition 'finalTick' is always false [knownConditionTrueFalse]
        if (finalTick)
            ^
..\src\game.cpp:3807:22: note: Assignment 'finalTick=false', assigned value is 0
    bool finalTick = false;
                     ^
..\src\game.cpp:3893:13: note: Condition 'finalTick' is always false
        if (finalTick)
            ^
..\src\game.cpp:4140:17: style: Condition 'printDiagrams' is always true [knownConditionTrueFalse]
            if (printDiagrams && m->nags[i] == NAG_Diagram)
                ^
..\src\game.cpp:3970:26: note: Assignment 'printDiagrams=true', assigned value is 1
    bool printDiagrams = true;
                         ^
..\src\game.cpp:4140:17: note: Condition 'printDiagrams' is always true
            if (printDiagrams && m->nags[i] == NAG_Diagram)
                ^
..\src\game.cpp:1410:12: warning: Either the condition 'm!=NULL' is redundant or there is possible null pointer dereference: m. [nullPointerRedundantCheck]
    while (m->marker != END_MARKER && m != NULL)
           ^
..\src\game.cpp:1417:11: note: Assuming that condition 'm!=NULL' is not redundant
    if (m != NULL)
          ^
..\src\game.cpp:1410:12: note: Null pointer dereference
    while (m->marker != END_MARKER && m != NULL)
           ^
..\src\game.cpp:1459:12: warning: Either the condition 'move!=NULL' is redundant or there is possible null pointer dereference: move. [nullPointerRedundantCheck]
    while (move->marker != END_MARKER && move != NULL)
           ^
..\src\game.cpp:1475:14: note: Assuming that condition 'move!=NULL' is not redundant
    if (move != NULL)
             ^
..\src\game.cpp:1459:12: note: Null pointer dereference
    while (move->marker != END_MARKER && move != NULL)
           ^
..\src\game.cpp:3861:61: style: Same expression on both sides of '-'. [duplicateExpression]
        sprintf(temp, "\\pspicture[](%d,%d)(%d,%d)\n", minX - 1, minY, ((lastX > maxX) ? lastX : maxX), maxY);
                                                            ^
..\src\game.cpp:3816:16: note: 'minX' is assigned value '1' here.
    int minX = 1;
               ^
..\src\game.cpp:3861:61: note: Same expression on both sides of '-'.
        sprintf(temp, "\\pspicture[](%d,%d)(%d,%d)\n", minX - 1, minY, ((lastX > maxX) ? lastX : maxX), maxY);
                                                            ^
..\src\game.cpp:1547:17: style: The scope of the variable 'hpNew' can be reduced. [variableScope]
    uint hpOld, hpNew;
                ^
..\src\game.cpp:3660:10: style: The scope of the variable 'temp' can be reduced. [variableScope]
    char temp[256];
         ^
..\src\game.cpp:3807:10: style: The scope of the variable 'finalTick' can be reduced. [variableScope]
    bool finalTick = false;
         ^
..\src\game.cpp:3816:9: style: The scope of the variable 'minX' can be reduced. [variableScope]
    int minX = 1;
        ^
..\src\game.cpp:3966:17: style: The scope of the variable 'diagramStr' can be reduced. [variableScope]
    const char *diagramStr = "\\begin{center}\n\\vspace{1ex}\n\\chessboard\n\\vspace{1ex}\n\\end{center}\n";
                ^
..\src\game.cpp:3971:10: style: The scope of the variable 'diagramPrinted' can be reduced. [variableScope]
    bool diagramPrinted;
         ^
..\src\game.cpp:5455:10: style: The scope of the variable 'b' can be reduced. [variableScope]
    byte b;
         ^
..\src\game.cpp:2795:16: style: Local variable 'm' shadows outer variable [shadowVariable]
        moveT *m = CurrentMove;
               ^
..\src\game.cpp:2758:12: note: Shadowed declaration
    moveT *m = CurrentMove;
           ^
..\src\game.cpp:2795:16: note: Shadow variable
        moveT *m = CurrentMove;
               ^
..\src\game.cpp:3898:18: style: Local variable 'x' shadows outer variable [shadowVariable]
        for (int x = 1; x < NumHalfMoves; x++)
                 ^
..\src\game.cpp:3682:9: note: Shadowed declaration
    int x = 0;
        ^
..\src\game.cpp:3898:18: note: Shadow variable
        for (int x = 1; x < NumHalfMoves; x++)
                 ^
..\src\game.cpp:3912:18: style: Local variable 'x' shadows outer variable [shadowVariable]
        for (int x = 1; x < scoreHalfMoves; x++)
                 ^
..\src\game.cpp:3682:9: note: Shadowed declaration
    int x = 0;
        ^
..\src\game.cpp:3912:18: note: Shadow variable
        for (int x = 1; x < scoreHalfMoves; x++)
                 ^
..\src\game.cpp:4278:31: style: Local variable 'i' shadows outer variable [shadowVariable]
                    for (uint i = 0; i < (uint)v->nagCount; i++)
                              ^
..\src\game.cpp:4250:23: note: Shadowed declaration
            for (uint i = 0; i < m->numVariations; i++)
                      ^
..\src\game.cpp:4278:31: note: Shadow variable
                    for (uint i = 0; i < (uint)v->nagCount; i++)
                              ^
..\src\position.h:131:12: style: Unused private function: 'Position::AssertPos' [unusedPrivateFunction]
    errorT AssertPos(); //  Checks for errors in board etc.
           ^
..\src\tkdnd\win\TkDND_OleDND.cpp:279:27: portability: Assigning an integer to a pointer is not portable. [AssignmentIntegerToAddress]
              CurPosition = 1 + _tcschr(pszFileName, '\0');
                          ^
..\src\tkscid.cpp:415:0: information: Skipping configuration 'SOURCE_TCL_FILE' since the value of 'SOURCE_TCL_FILE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        strCopy(end + 1, SOURCE_TCL_FILE);
^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

